name: Website CI/CD Pipeline

on:
  push:
    paths:
      - 'apps/website/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/website-ci.yml'
    branches: [main, develop]
  pull_request:
    paths:
      - 'apps/website/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/website-ci.yml'
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.check-affected.outputs.affected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check affected projects
        id: check-affected
        run: |
          affected=$(npx nx show projects --affected --json)
          echo "affected=$affected" >> $GITHUB_OUTPUT
          echo "Affected projects: $affected"

  test:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'website')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npx nx test website --coverage --watch=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/apps/website/lcov.info
          flags: website
          name: website-coverage

  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'website')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx nx lint website

      - name: Run type checking
        run: npx nx run website:typecheck

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'website')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build website application
        run: npx nx build website --configuration=production

      - name: Build SSR
        run: npx nx run website:build:ssr

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website-build
          path: dist/apps/website/
          retention-days: 1

  e2e:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: contains(fromJson(needs.setup.outputs.affected), 'website')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: dist/apps/website/

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npx nx e2e website-e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: apps/website-e2e/test-results/
          retention-days: 7

  lighthouse:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: contains(fromJson(needs.setup.outputs.affected), 'website') && github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: dist/apps/website/

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'website')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, lint, build, e2e]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: dist/apps/website/

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: rsync, scp, or cloud provider deployment scripts

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, lint, build, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: dist/apps/website/

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: rsync, scp, or cloud provider deployment scripts

      - name: Notify deployment success
        if: success()
        run: |
          echo "Website deployed successfully to production!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic