name: Project Board Synchronization

on:
  issues:
    types: [opened, closed, reopened, labeled, unlabeled, assigned, unassigned]
  pull_request:
    types: [opened, closed, reopened, ready_for_review, converted_to_draft, merged]
  pull_request_review:
    types: [submitted]
  workflow_run:
    workflows: ["Website CI/CD Pipeline", "API CI/CD Pipeline", "PWA CI/CD Pipeline", "Admin Console CI/CD Pipeline"]
    types: [completed]

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  sync-website-project:
    name: Sync Website Project Board
    runs-on: ubuntu-latest
    if: |
      (github.event.issue && contains(github.event.issue.labels.*.name, 'website')) ||
      (github.event.pull_request && contains(github.event.pull_request.labels.*.name, 'website')) ||
      (github.event.workflow_run && github.event.workflow_run.name == 'Website CI/CD Pipeline')
    steps:
      - name: Move to Requirements Review when labeled ready-for-review
        if: |
          github.event.action == 'labeled' && 
          github.event.label.name == 'ready-for-review'
        run: |
          echo "🔄 Moving website issue to Requirements Review"
          # Project item status update logic would go here

      - name: Move to Development when assigned
        if: github.event.action == 'assigned'
        run: |
          echo "🔄 Moving website issue to Development"
          # Update project item status to Development

      - name: Move to Code Review when PR opened
        if: |
          github.event.action == 'opened' && 
          github.event.pull_request &&
          contains(github.event.pull_request.labels.*.name, 'website')
        run: |
          echo "🔄 Moving to Code Review for website PR"

      - name: Move to Testing when PR approved
        if: |
          github.event.review.state == 'approved' &&
          contains(github.event.pull_request.labels.*.name, 'website')
        run: |
          echo "🔄 Moving to Testing after website PR approval"

      - name: Move to Deployment when CI passes
        if: |
          github.event.workflow_run.name == 'Website CI/CD Pipeline' &&
          github.event.workflow_run.conclusion == 'success'
        run: |
          echo "🔄 CI passed - moving to Deployment queue"

      - name: Move to Done when issue closed
        if: github.event.action == 'closed' && github.event.issue
        run: |
          echo "✅ Moving completed website issue to Done"

  sync-api-project:
    name: Sync API Project Board
    runs-on: ubuntu-latest
    if: |
      (github.event.issue && contains(github.event.issue.labels.*.name, 'api')) ||
      (github.event.pull_request && contains(github.event.pull_request.labels.*.name, 'api')) ||
      (github.event.workflow_run && github.event.workflow_run.name == 'API CI/CD Pipeline')
    steps:
      - name: Move to Database Review for database issues
        if: |
          github.event.action == 'labeled' && 
          (github.event.label.name == 'database' || github.event.label.name == 'migration')
        run: |
          echo "🔄 Moving API database issue to Database Review"

      - name: Move to Security Review for security issues
        if: |
          github.event.action == 'labeled' && 
          (github.event.label.name == 'security' || github.event.label.name == 'auth')
        run: |
          echo "🔄 Moving API security issue to Security Review"

      - name: Move to Integration Testing after development
        if: |
          github.event.action == 'ready_for_review' &&
          contains(github.event.pull_request.labels.*.name, 'api')
        run: |
          echo "🔄 Moving to Integration Testing for API PR"

      - name: Handle performance test results
        if: |
          github.event.workflow_run.name == 'API CI/CD Pipeline' &&
          github.event.workflow_run.conclusion
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "✅ API performance tests passed"
          else
            echo "❌ API performance tests failed - moving back to development"
          fi

      - name: Move to Staging Deployment on main branch
        if: |
          github.event.workflow_run.name == 'API CI/CD Pipeline' &&
          github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.head_branch == 'main'
        run: |
          echo "🚀 Moving to Staging Deployment"

  sync-pwa-project:
    name: Sync PWA Project Board
    runs-on: ubuntu-latest
    if: |
      (github.event.issue && contains(github.event.issue.labels.*.name, 'pwa')) ||
      (github.event.pull_request && contains(github.event.pull_request.labels.*.name, 'pwa')) ||
      (github.event.workflow_run && github.event.workflow_run.name == 'PWA CI/CD Pipeline')
    steps:
      - name: Move to PWA Optimization for performance issues
        if: |
          github.event.action == 'labeled' && 
          (github.event.label.name == 'performance' || github.event.label.name == 'mobile-optimization')
        run: |
          echo "🔄 Moving PWA performance issue to PWA Optimization"

      - name: Move to Offline Testing for offline features
        if: |
          github.event.action == 'labeled' && 
          github.event.label.name == 'offline'
        run: |
          echo "🔄 Moving PWA offline feature to Offline Testing"

      - name: Move to Accessibility Testing for accessibility features
        if: |
          github.event.action == 'labeled' && 
          github.event.label.name == 'accessibility'
        run: |
          echo "🔄 Moving to Accessibility Testing"

      - name: Handle PWA audit results
        if: |
          github.event.workflow_run.name == 'PWA CI/CD Pipeline' &&
          github.event.workflow_run.conclusion
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "✅ PWA audit passed - Lighthouse score meets requirements"
          else
            echo "❌ PWA audit failed - moving to optimization queue"
          fi

      - name: Move to App Store Preparation when ready
        if: |
          github.event.workflow_run.name == 'PWA CI/CD Pipeline' &&
          github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.head_branch == 'main'
        run: |
          echo "📱 Moving to App Store Preparation"

  sync-admin-project:
    name: Sync Admin Console Project Board
    runs-on: ubuntu-latest
    if: |
      (github.event.issue && contains(github.event.issue.labels.*.name, 'admin')) ||
      (github.event.pull_request && contains(github.event.pull_request.labels.*.name, 'admin')) ||
      (github.event.workflow_run && github.event.workflow_run.name == 'Admin Console CI/CD Pipeline')
    steps:
      - name: Move to Security Review for RBAC/security issues
        if: |
          github.event.action == 'labeled' && 
          (github.event.label.name == 'rbac' || github.event.label.name == 'security')
        run: |
          echo "🔄 Moving admin security issue to Security Review"

      - name: Move to User Acceptance Testing for user-facing features
        if: |
          github.event.action == 'labeled' && 
          (github.event.label.name == 'user-admin' || github.event.label.name == 'customer-support')
        run: |
          echo "🔄 Moving user-facing feature to User Acceptance Testing"

      - name: Move to Compliance Review for compliance features
        if: |
          github.event.action == 'labeled' && 
          contains(github.event.issue.title, 'compliance')
        run: |
          echo "🔄 Moving compliance feature to Compliance Review"

      - name: Handle compliance validation results
        if: |
          github.event.workflow_run.name == 'Admin Console CI/CD Pipeline' &&
          github.event.workflow_run.conclusion
        run: |
          if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
            echo "✅ Compliance validation passed"
          else
            echo "❌ Compliance validation failed - alerting compliance team"
          fi

      - name: Move to Production Deployment when all checks pass
        if: |
          github.event.workflow_run.name == 'Admin Console CI/CD Pipeline' &&
          github.event.workflow_run.conclusion == 'success' &&
          github.event.workflow_run.head_branch == 'main'
        run: |
          echo "🚀 Moving to Production Deployment"

  cross-project-coordination:
    name: Cross-Project Coordination
    runs-on: ubuntu-latest
    if: |
      contains(github.event.issue.body, 'Dependencies:') ||
      github.event.action == 'closed'
    steps:
      - name: Check cross-project dependencies
        run: |
          echo "🔗 Checking cross-project dependencies"
          # Logic to check if this completion unblocks other projects
          
          ISSUE_TITLE="${{ github.event.issue.title }}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          
          # API completion enables frontend work
          if echo "$ISSUE_TITLE" | grep -iE "(api|endpoint|authentication)" > /dev/null; then
            echo "🔓 API work completed - may unblock frontend projects"
          fi
          
          # Shared component completion affects all projects
          if echo "$ISSUE_TITLE" | grep -iE "(shared|component|library)" > /dev/null; then
            echo "🔓 Shared component completed - may unblock all projects"
          fi

      - name: Update dependent project boards
        if: github.event.action == 'closed'
        run: |
          echo "📋 Updating dependent project boards"
          # Logic to move dependent issues from blocked to ready states

  milestone-tracking:
    name: Milestone Progress Tracking
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' || github.event.action == 'reopened'
    steps:
      - name: Check milestone completion
        run: |
          echo "🎯 Checking milestone progress"
          
          # Get issue milestone
          MILESTONE="${{ github.event.issue.milestone.title }}"
          if [ -n "$MILESTONE" ]; then
            echo "📊 Issue affects milestone: $MILESTONE"
            
            # Check if milestone is now complete
            OPEN_ISSUES=$(gh issue list --milestone "$MILESTONE" --state open --json number | jq length)
            if [ "$OPEN_ISSUES" = "0" ]; then
              echo "🎉 Milestone '$MILESTONE' is now complete!"
              # Trigger milestone completion actions
            else
              echo "📈 Milestone '$MILESTONE' has $OPEN_ISSUES remaining issues"
            fi
          fi

      - name: Generate milestone progress report
        run: |
          echo "📊 Generating milestone progress report"
          
          # Get all milestones and their progress
          gh api repos/:owner/:repo/milestones | jq -r '.[] | 
            "Milestone: \(.title)
            Open Issues: \(.open_issues)
            Closed Issues: \(.closed_issues)
            Progress: \((.closed_issues * 100 / (.open_issues + .closed_issues) | floor))%
            Due Date: \(.due_on // "No due date")
            ---"'

  project-health-monitoring:
    name: Project Health Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule || github.event.action == 'opened'
    steps:
      - name: Monitor project velocity
        run: |
          echo "📈 Monitoring project velocity"
          
          # Calculate issues closed in last 7 days
          WEEK_AGO=$(date -d "7 days ago" --iso-8601)
          
          for project in "website" "api" "pwa" "admin"; do
            CLOSED_COUNT=$(gh issue list --label $project --state closed --search "closed:>$WEEK_AGO" --json number | jq length)
            OPENED_COUNT=$(gh issue list --label $project --state all --search "created:>$WEEK_AGO" --json number | jq length)
            
            echo "📊 $project project - Closed: $CLOSED_COUNT, Opened: $OPENED_COUNT this week"
          done

      - name: Alert on bottlenecks
        run: |
          echo "🚨 Checking for project bottlenecks"
          
          # Check for issues stuck in review for >3 days
          THREE_DAYS_AGO=$(date -d "3 days ago" --iso-8601)
          
          STUCK_IN_REVIEW=$(gh issue list --label "ready-for-review" --search "updated:<$THREE_DAYS_AGO" --json number,title | jq length)
          
          if [ "$STUCK_IN_REVIEW" -gt "0" ]; then
            echo "⚠️ Warning: $STUCK_IN_REVIEW issues stuck in review for >3 days"
          fi

      - name: Resource allocation analysis
        run: |
          echo "👥 Analyzing resource allocation"
          
          # Check assignee distribution
          for project in "website" "api" "pwa" "admin"; do
            echo "📋 $project project assignee distribution:"
            gh issue list --label $project --state open --json assignees | \
            jq -r '.[] | .assignees[].login // "unassigned"' | \
            sort | uniq -c | sort -nr
          done