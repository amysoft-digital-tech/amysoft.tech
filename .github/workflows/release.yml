name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      release-notes: ${{ steps.generate-notes.outputs.notes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Generate release notes
        id: generate-notes
        run: |
          # Generate release notes from commit messages since last tag
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            NOTES=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            NOTES=$(git log --pretty=format:"- %s")
          fi
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  build-all:
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      matrix:
        app: [website, pwa, api, admin]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.app }}
        run: |
          if npx nx show project ${{ matrix.app }} --json | jq -e '.targets.build' > /dev/null; then
            npx nx build ${{ matrix.app }} --configuration=production
          else
            echo "No build target found for ${{ matrix.app }}, skipping..."
          fi

      - name: Create deployment package
        run: |
          if [ -d "dist/apps/${{ matrix.app }}" ]; then
            cd dist/apps/${{ matrix.app }}
            tar -czf ../../../${{ matrix.app }}-${{ needs.prepare-release.outputs.version }}.tar.gz .
          fi

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.app }}-deployment
          path: ${{ matrix.app }}-${{ needs.prepare-release.outputs.version }}.tar.gz
          retention-days: 30

  test-production-build:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-all]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all deployment artifacts
        uses: actions/download-artifact@v4

      - name: Verify build integrity
        run: |
          for app in website pwa api admin; do
            if [ -f "$app-deployment/$app-${{ needs.prepare-release.outputs.version }}.tar.gz" ]; then
              echo "‚úÖ $app build artifact exists"
              tar -tzf "$app-deployment/$app-${{ needs.prepare-release.outputs.version }}.tar.gz" > /dev/null
              echo "‚úÖ $app build artifact is valid"
            else
              echo "‚ö†Ô∏è $app build artifact not found"
            fi
          done

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-all, test-production-build]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all deployment artifacts
        uses: actions/download-artifact@v4

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          release_name: Release ${{ needs.prepare-release.outputs.version }}
          body: |
            ## üöÄ Release ${{ needs.prepare-release.outputs.version }}
            
            ### What's Changed
            ${{ needs.prepare-release.outputs.release-notes }}
            
            ### üì¶ Deployment Artifacts
            - Website Application
            - PWA Learning Platform  
            - API Backend Services
            - Admin Console
            
            ### üîß Technical Details
            - Node.js: ${{ env.NODE_VERSION }}
            - Build Date: ${{ github.event.head_commit.timestamp }}
            - Commit: ${{ github.sha }}
            
            ### üìà Performance Metrics
            - Bundle sizes optimized for production
            - Core Web Vitals compliance verified
            - Security scanning completed
          draft: false
          prerelease: false

      - name: Upload release assets
        run: |
          for app in website pwa api admin; do
            if [ -f "$app-deployment/$app-${{ needs.prepare-release.outputs.version }}.tar.gz" ]; then
              gh release upload ${{ needs.prepare-release.outputs.version }} \
                "$app-deployment/$app-${{ needs.prepare-release.outputs.version }}.tar.gz" \
                --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-all, test-production-build]
    if: github.event.inputs.environment == 'staging' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying ${{ needs.prepare-release.outputs.version }} to staging..."
          # Add staging deployment logic here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [prepare-release, build-all, test-production-build, create-release]
    if: (github.event.inputs.environment == 'production' || github.event_name == 'push') && startsWith(github.ref, 'refs/tags/')
    environment: production
    steps:
      - name: Download deployment artifacts
        uses: actions/download-artifact@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying ${{ needs.prepare-release.outputs.version }} to production..."
          # Add production deployment logic here
          
          # Example deployment steps:
          # 1. Deploy website to CDN/hosting
          # 2. Deploy API to server/container platform
          # 3. Deploy PWA to app stores (if applicable)
          # 4. Deploy admin console
          
      - name: Verify deployment
        run: |
          echo "‚úÖ Verifying production deployment..."
          # Add deployment verification logic
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "üéâ Production deployment of ${{ needs.prepare-release.outputs.version }} completed successfully!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed, initiating rollback..."
          # Add rollback logic

  post-deployment:
    runs-on: ubuntu-latest
    needs: [prepare-release, deploy-production]
    if: success()
    steps:
      - name: Run post-deployment tests
        run: |
          echo "üß™ Running post-deployment verification tests..."
          # Add smoke tests, health checks, etc.

      - name: Update monitoring
        run: |
          echo "üìä Updating monitoring dashboards..."
          # Update deployment tracking, monitoring configs, etc.

      - name: Document release
        run: |
          echo "üìù Documenting release ${{ needs.prepare-release.outputs.version }}..."
          # Update documentation, changelogs, etc.