name: Monorepo CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected-projects: ${{ steps.check-affected.outputs.projects }}
      has-affected: ${{ steps.check-affected.outputs.has-affected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check affected projects
        id: check-affected
        run: |
          affected=$(npx nx show projects --affected --json)
          echo "projects=$affected" >> $GITHUB_OUTPUT
          
          if [ "$affected" != "[]" ]; then
            echo "has-affected=true" >> $GITHUB_OUTPUT
          else
            echo "has-affected=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Affected projects: $affected"

  validate:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate workspace
        run: npx nx workspace-lint

      - name: Check package.json formatting
        run: npx nx format:check

  test:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests for ${{ matrix.project }}
        run: |
          if npx nx show project ${{ matrix.project }} --json | jq -e '.targets.test' > /dev/null; then
            npx nx test ${{ matrix.project }} --coverage --watch=false
          else
            echo "No test target found for ${{ matrix.project }}, skipping..."
          fi

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/apps/${{ matrix.project }}/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting for ${{ matrix.project }}
        run: |
          if npx nx show project ${{ matrix.project }} --json | jq -e '.targets.lint' > /dev/null; then
            npx nx lint ${{ matrix.project }}
          else
            echo "No lint target found for ${{ matrix.project }}, skipping..."
          fi

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.has-affected == 'true'
    strategy:
      matrix:
        project: ${{ fromJson(needs.setup.outputs.affected-projects) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build ${{ matrix.project }}
        run: |
          if npx nx show project ${{ matrix.project }} --json | jq -e '.targets.build' > /dev/null; then
            npx nx build ${{ matrix.project }} --configuration=production
          else
            echo "No build target found for ${{ matrix.project }}, skipping..."
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ matrix.project }}-build
          path: dist/apps/${{ matrix.project }}/
          retention-days: 1

  dependency-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Run dependency graph validation
        run: npx nx graph --file=dependency-graph.json

  performance-budget:
    runs-on: ubuntu-latest
    needs: [setup, build]
    if: needs.setup.outputs.has-affected == 'true' && contains(fromJson(needs.setup.outputs.affected-projects), 'website')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download website build
        uses: actions/download-artifact@v4
        with:
          name: website-build
          path: dist/apps/website/

      - name: Check bundle size
        run: |
          echo "Checking bundle size for performance budget..."
          # Add bundle size checking logic
          # Example: bundlesize, webpack-bundle-analyzer, etc.

  notify:
    runs-on: ubuntu-latest
    needs: [validate, test, lint, build]
    if: always()
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.validate.result }}" == "success" ] && 
             [ "${{ needs.test.result }}" == "success" ] && 
             [ "${{ needs.lint.result }}" == "success" ] && 
             [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All checks passed!"
          else
            echo "❌ Some checks failed!"
            exit 1
          fi