name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build all applications
      run: npx nx run-many --target=build --all --prod

    - name: Build Docker images
      run: |
        docker build -f apps/website/Dockerfile -t amysoft/website:staging .
        docker build -f apps/pwa/Dockerfile -t amysoft/pwa:staging .
        docker build -f apps/api/Dockerfile -t amysoft/api:staging .
        docker build -f apps/admin/Dockerfile -t amysoft/admin:staging .

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment"
        # Add staging deployment commands here

  deploy-production:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    needs: [security-scan, performance-test]
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build all applications
      run: npx nx run-many --target=build --all --prod

    - name: Run database migrations
      run: |
        echo "Running production database migrations"
        # Add migration commands here
      env:
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

    - name: Build and push Docker images
      run: |
        echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -f apps/website/Dockerfile -t amysoft/website:${{ github.ref_name }} .
        docker build -f apps/pwa/Dockerfile -t amysoft/pwa:${{ github.ref_name }} .
        docker build -f apps/api/Dockerfile -t amysoft/api:${{ github.ref_name }} .
        docker build -f apps/admin/Dockerfile -t amysoft/admin:${{ github.ref_name }} .
        
        docker push amysoft/website:${{ github.ref_name }}
        docker push amysoft/pwa:${{ github.ref_name }}
        docker push amysoft/api:${{ github.ref_name }}
        docker push amysoft/admin:${{ github.ref_name }}

    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add production deployment commands here

  security-scan:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Run comprehensive security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium

    - name: Run OWASP ZAP security scan
      uses: zaproxy/action-full-scan@v0.8.0
      with:
        target: 'https://staging.amysoft.tech'

  performance-test:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build applications
      run: npx nx run-many --target=build --all --prod

    - name: Run Lighthouse performance audit
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './lighthouserc.json'
        uploadArtifacts: true

    - name: Run load testing
      run: |
        echo "Running load testing with Artillery"
        # Add load testing commands here