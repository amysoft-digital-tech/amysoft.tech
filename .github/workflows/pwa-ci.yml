name: PWA CI/CD Pipeline

on:
  push:
    paths:
      - 'apps/pwa/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/pwa-ci.yml'
    branches: [main, develop]
  pull_request:
    paths:
      - 'apps/pwa/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/pwa-ci.yml'
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.check-affected.outputs.affected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check affected projects
        id: check-affected
        run: |
          affected=$(npx nx show projects --affected --json)
          echo "affected=$affected" >> $GITHUB_OUTPUT
          echo "Affected projects: $affected"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx nx lint pwa

      - name: Run type checking
        run: npx nx run pwa:typecheck

  test:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npx nx test pwa --coverage --watch=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/apps/pwa/lcov.info
          flags: pwa
          name: pwa-coverage

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build PWA application
        run: npx nx build pwa --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/
          retention-days: 1

  pwa-audit:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start local server
        run: |
          npx http-server dist/apps/pwa -p 8080 &
          sleep 10
        env:
          CI: true

      - name: Run Lighthouse PWA audit
        run: |
          lhci autorun --config=.lighthouserc-pwa.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-pwa-results
          path: .lighthouseci/
          retention-days: 7

  accessibility-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Run accessibility tests
        run: npx nx run pwa:test:accessibility

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: apps/pwa/accessibility-results/
          retention-days: 7

  e2e-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    strategy:
      matrix:
        browser: [chrome, firefox]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Install Playwright
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Start local server
        run: |
          npx http-server dist/apps/pwa -p 8080 &
          sleep 10

      - name: Run E2E tests
        run: npx nx run pwa-e2e:e2e --browser=${{ matrix.browser }}
        env:
          PWA_BASE_URL: http://localhost:8080

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results-${{ matrix.browser }}
          path: apps/pwa-e2e/test-results/
          retention-days: 7

  offline-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Start local server
        run: |
          npx http-server dist/apps/pwa -p 8080 &
          sleep 10

      - name: Run offline functionality tests
        run: npx nx run pwa:test:offline
        env:
          PWA_BASE_URL: http://localhost:8080

      - name: Upload offline test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: offline-test-results
          path: apps/pwa/offline-test-results/
          retention-days: 7

  mobile-test:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' && contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Start local server
        run: |
          npx http-server dist/apps/pwa -p 8080 &
          sleep 10

      - name: Run mobile device tests
        run: |
          echo "Running mobile device emulation tests..."
          npx nx run pwa:test:mobile-devices
        env:
          PWA_BASE_URL: http://localhost:8080

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: apps/pwa/mobile-test-results/
          retention-days: 7

  pwa-validation:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'pwa')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Validate PWA manifest
        run: |
          echo "Validating PWA manifest file..."
          
          # Check if manifest.json exists
          if [ ! -f "dist/apps/pwa/manifest.json" ]; then
            echo "❌ manifest.json not found"
            exit 1
          fi
          
          # Validate manifest structure
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('dist/apps/pwa/manifest.json', 'utf8'));
            
            console.log('✅ Manifest validation:');
            console.log('Name:', manifest.name || '❌ Missing');
            console.log('Short name:', manifest.short_name || '❌ Missing');
            console.log('Start URL:', manifest.start_url || '❌ Missing');
            console.log('Display:', manifest.display || '❌ Missing');
            console.log('Theme color:', manifest.theme_color || '❌ Missing');
            console.log('Background color:', manifest.background_color || '❌ Missing');
            console.log('Icons:', manifest.icons?.length ? '✅ ' + manifest.icons.length + ' icons' : '❌ Missing icons');
            
            // Validate required fields
            const required = ['name', 'short_name', 'start_url', 'display', 'icons'];
            const missing = required.filter(field => !manifest[field]);
            
            if (missing.length > 0) {
              console.error('❌ Missing required fields:', missing.join(', '));
              process.exit(1);
            }
            
            console.log('✅ PWA manifest validation passed');
          "

      - name: Validate service worker
        run: |
          echo "Validating service worker..."
          
          # Check if service worker files exist
          if [ ! -f "dist/apps/pwa/ngsw.json" ]; then
            echo "❌ ngsw.json not found"
            exit 1
          fi
          
          if [ ! -f "dist/apps/pwa/ngsw-worker.js" ]; then
            echo "❌ ngsw-worker.js not found"
            exit 1
          fi
          
          echo "✅ Service worker files found"

      - name: Check PWA assets
        run: |
          echo "Checking PWA assets..."
          
          # Check for required icon sizes
          required_sizes=(72 96 128 144 152 192 384 512)
          
          for size in "${required_sizes[@]}"; do
            if [ -f "dist/apps/pwa/assets/icons/icon-${size}x${size}.png" ]; then
              echo "✅ Icon ${size}x${size} found"
            else
              echo "⚠️ Icon ${size}x${size} missing"
            fi
          done

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, build, pwa-audit, e2e-test, pwa-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Deploy to staging
        run: |
          echo "Deploying PWA to staging environment..."
          # Add your staging deployment commands here
          # Example: Deploy to Firebase Hosting, Netlify, Vercel, etc.

      - name: Run staging health checks
        run: |
          echo "Running staging health checks..."
          # Add health check commands for staging PWA

  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, test, build, pwa-audit, e2e-test, pwa-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: pwa-build
          path: dist/apps/pwa/

      - name: Deploy to production
        run: |
          echo "Deploying PWA to production environment..."
          # Add your production deployment commands here
          # Example: Deploy to Firebase Hosting, Netlify, Vercel, etc.

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands for production PWA

      - name: Update app stores
        run: |
          echo "Updating PWA in app stores..."
          # Add commands to update TWA packages in app stores

      - name: Notify deployment success
        if: success()
        run: |
          echo "PWA deployed successfully to production!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic