name: PWA Testing Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'apps/pwa/**'
      - 'libs/**'
      - '.github/workflows/pwa-testing.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'apps/pwa/**'
      - 'libs/**'
  schedule:
    # Run nightly tests
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18.x'
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
  CYPRESS_CACHE_FOLDER: ~/.cache/cypress
  
jobs:
  # Job 1: Unit and Integration Tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
        
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Cache Nx
      uses: actions/cache@v3
      with:
        path: .nx/cache
        key: nx-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          nx-${{ runner.os }}-${{ matrix.node-version }}-
          nx-${{ runner.os }}-
    
    - name: Run Linting
      run: npx nx lint pwa
    
    - name: Run Type Checking
      run: npx nx run pwa:type-check
    
    - name: Run Unit Tests
      run: npx nx test pwa --configuration=ci --coverage --watchAll=false
    
    - name: Run PWA-Specific Tests
      run: npx nx run pwa:test:pwa --coverage --watchAll=false
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.node-version }}
        path: |
          test-results/apps/pwa/
          coverage/apps/pwa/
        retention-days: 7
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/apps/pwa/lcov.info
        flags: unit-tests-${{ matrix.node-version }}
        name: pwa-unit-tests

  # Job 2: End-to-End Testing
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: unit-tests
    
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Start Test Server
      run: |
        npx nx serve pwa --configuration=production &
        npx wait-on http://localhost:8100 --timeout 60000
    
    - name: Run E2E Tests
      run: npx nx e2e pwa-e2e --browser=${{ matrix.browser }}
      env:
        PLAYWRIGHT_BROWSER: ${{ matrix.browser }}
    
    - name: Upload E2E Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-${{ matrix.browser }}
        path: |
          apps/pwa-e2e/results/
          apps/pwa-e2e/videos/
          apps/pwa-e2e/screenshots/
        retention-days: 7

  # Job 3: PWA Lighthouse Auditing
  lighthouse-audit:
    name: Lighthouse PWA Audit
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x
    
    - name: Start Application Server
      run: |
        npx nx serve pwa --configuration=production &
        npx wait-on http://localhost:8100 --timeout 60000
    
    - name: Run Lighthouse CI
      run: |
        lhci autorun --config=apps/pwa/lighthouserc.json
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
    
    - name: Upload Lighthouse Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lighthouse-reports
        path: |
          lighthouse-reports/
          .lighthouseci/
        retention-days: 30

  # Job 4: Performance Testing
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: unit-tests
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Install Performance Testing Tools
      run: |
        npm install -g clinic autocannon
        npm install -D puppeteer
    
    - name: Start Application Server
      run: |
        npx nx serve pwa --configuration=production &
        npx wait-on http://localhost:8100 --timeout 60000
    
    - name: Run Performance Tests
      run: |
        # Load testing
        autocannon -c 10 -d 30 -R 10 http://localhost:8100 > performance-load-test.txt
        
        # Memory and CPU profiling
        clinic doctor --on-port 'autocannon http://localhost:8100' -- node apps/pwa/dist/main.js || true
    
    - name: Run Core Web Vitals Testing
      run: npx nx run pwa:test:performance
    
    - name: Upload Performance Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-reports
        path: |
          performance-reports/
          performance-load-test.txt
          .clinic/
        retention-days: 14

  # Job 5: Accessibility Testing
  accessibility-tests:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: unit-tests
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Install axe-core CLI
      run: npm install -g @axe-core/cli
    
    - name: Start Application Server
      run: |
        npx nx serve pwa --configuration=production &
        npx wait-on http://localhost:8100 --timeout 60000
    
    - name: Run Accessibility Tests
      run: |
        # Run axe-core accessibility tests
        axe http://localhost:8100 --exit --save accessibility-report.json
        
        # Run custom accessibility tests
        npx nx run pwa:test:a11y
    
    - name: Upload Accessibility Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: accessibility-reports
        path: |
          accessibility-report.json
          a11y-reports/
        retention-days: 14

  # Job 6: Security Testing
  security-tests:
    name: Security Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: unit-tests
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Run npm Security Audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
    
    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Run OWASP ZAP Security Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:8100'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          report_html.html
          report_md.md
          report_json.json
        retention-days: 30

  # Job 7: Cross-Browser Testing
  cross-browser-tests:
    name: Cross-Browser Testing
    runs-on: ubuntu-latest
    timeout-minutes: 40
    needs: unit-tests
    
    strategy:
      matrix:
        browser: [chrome, firefox, safari, edge]
        include:
          - browser: safari
            os: macos-latest
    
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Install Browser Dependencies
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Start Application Server
      run: |
        npx nx serve pwa --configuration=production &
        npx wait-on http://localhost:8100 --timeout 60000
    
    - name: Run Cross-Browser Tests
      run: npx nx run pwa:test:cross-browser --browser=${{ matrix.browser }}
    
    - name: Upload Cross-Browser Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cross-browser-results-${{ matrix.browser }}
        path: |
          cross-browser-reports/
        retention-days: 7

  # Job 8: Mobile Testing
  mobile-tests:
    name: Mobile Device Testing
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: unit-tests
    
    strategy:
      matrix:
        device: [iPhone_13, Pixel_5, iPad_Air]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Install Mobile Testing Tools
      run: |
        npx playwright install --with-deps chromium
        npm install -D @playwright/test
    
    - name: Build PWA Application
      run: npx nx build pwa --configuration=production
    
    - name: Start Application Server
      run: |
        npx nx serve pwa --configuration=production &
        npx wait-on http://localhost:8100 --timeout 60000
    
    - name: Run Mobile Device Tests
      run: npx nx run pwa:test:mobile --device=${{ matrix.device }}
    
    - name: Upload Mobile Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results-${{ matrix.device }}
        path: |
          mobile-test-reports/
        retention-days: 7

  # Job 9: Test Results Aggregation
  test-results:
    name: Aggregate Test Results
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, lighthouse-audit, performance-tests, accessibility-tests, security-tests, cross-browser-tests, mobile-tests]
    if: always()
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-results/
    
    - name: Generate Test Summary
      run: |
        echo "# PWA Testing Pipeline Results" > test-summary.md
        echo "## Test Execution Summary" >> test-summary.md
        echo "- **Build**: ${{ github.run_number }}" >> test-summary.md
        echo "- **Commit**: ${{ github.sha }}" >> test-summary.md
        echo "- **Branch**: ${{ github.ref_name }}" >> test-summary.md
        echo "- **Timestamp**: $(date -u)" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Test Categories" >> test-summary.md
        echo "- ✅ Unit & Integration Tests" >> test-summary.md
        echo "- ✅ End-to-End Tests" >> test-summary.md
        echo "- ✅ PWA Lighthouse Audit" >> test-summary.md
        echo "- ✅ Performance Testing" >> test-summary.md
        echo "- ✅ Accessibility Testing" >> test-summary.md
        echo "- ✅ Security Testing" >> test-summary.md
        echo "- ✅ Cross-Browser Testing" >> test-summary.md
        echo "- ✅ Mobile Device Testing" >> test-summary.md
        
        # Display test results structure
        echo "" >> test-summary.md
        echo "## Artifacts Generated" >> test-summary.md
        find test-results/ -type f -name "*.xml" -o -name "*.json" -o -name "*.html" | head -20 >> test-summary.md
    
    - name: Upload Test Summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
    
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const testSummary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  # Job 10: Deployment to Staging (on main branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test-results
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Dependencies
      run: npm ci
    
    - name: Build PWA for Staging
      run: npx nx build pwa --configuration=staging
    
    - name: Deploy to Staging Environment
      run: |
        echo "Deploying PWA to staging environment..."
        # In a real implementation, this would deploy to staging
        echo "✅ PWA deployed to staging"
    
    - name: Run Smoke Tests on Staging
      run: |
        # Wait for deployment
        sleep 30
        # Run basic smoke tests
        npx nx run pwa:test:smoke --env=staging
    
    - name: Notify Deployment Success
      if: success()
      run: |
        echo "🚀 PWA successfully deployed to staging!"
        echo "🔗 Staging URL: https://staging.amysoft.tech"