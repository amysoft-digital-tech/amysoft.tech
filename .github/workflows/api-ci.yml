name: API CI/CD Pipeline

on:
  push:
    paths:
      - 'apps/api/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/api-ci.yml'
    branches: [main, develop]
  pull_request:
    paths:
      - 'apps/api/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/api-ci.yml'
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.check-affected.outputs.affected }}
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check affected projects
        id: check-affected
        run: |
          affected=$(npx nx show projects --affected --json)
          echo "affected=$affected" >> $GITHUB_OUTPUT
          echo "Affected projects: $affected"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'api')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx nx lint api

      - name: Run type checking
        run: npx nx run api:typecheck

  test:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'api')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npx nx run api:db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379

      - name: Run unit tests
        run: npx nx test api --coverage --watch=false
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/apps/api/lcov.info
          flags: api
          name: api-coverage

  integration-test:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'api')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npx nx run api:db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_integration
          REDIS_URL: redis://localhost:6379

      - name: Seed test data
        run: npx nx run api:db:seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_integration
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npx nx run api:test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_integration
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'api')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build API application
        run: npx nx build api --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: dist/apps/api/
          retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'api')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'api'
          path: './apps/api'
          format: 'ALL'

  load-test:
    runs-on: ubuntu-latest
    needs: [test, integration-test, build]
    if: github.event_name == 'pull_request' && contains(fromJson(needs.setup.outputs.affected), 'api')
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test_load
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: dist/apps/api/

      - name: Setup test database
        run: npx nx run api:db:migrate
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_load
          REDIS_URL: redis://localhost:6379

      - name: Start API server
        run: |
          npx nx serve api &
          sleep 30
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test_load
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key-for-ci
          PORT: 3000

      - name: Run load tests
        run: npx nx run api:test:load
        env:
          API_BASE_URL: http://localhost:3000

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results
          path: apps/api/load-test-results/
          retention-days: 7

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: dist/apps/api/

      - name: Deploy to staging
        run: |
          echo "Deploying API to staging environment..."
          # Add your staging deployment commands here
          # Example: Docker build and push, server deployment, etc.

      - name: Run staging health checks
        run: |
          echo "Running staging health checks..."
          # Add health check commands for staging environment

  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: dist/apps/api/

      - name: Deploy to production
        run: |
          echo "Deploying API to production environment..."
          # Add your production deployment commands here
          # Example: Docker build and push, server deployment, etc.

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands for production environment

      - name: Notify deployment success
        if: success()
        run: |
          echo "API deployed successfully to production!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic