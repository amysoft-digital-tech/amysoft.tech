name: Project Notifications and Alerts

on:
  issues:
    types: [opened, closed, labeled]
  pull_request:
    types: [opened, closed, ready_for_review]
  workflow_run:
    workflows: ["Website CI/CD Pipeline", "API CI/CD Pipeline", "PWA CI/CD Pipeline", "Admin Console CI/CD Pipeline"]
    types: [completed]
  schedule:
    - cron: '0 9 * * 1'    # Weekly summary on Monday 9 AM
    - cron: '0 17 * * *'   # Daily standup reminder at 5 PM

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  critical-issue-alerts:
    name: Critical Issue Alerts
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'opened' && 
      (contains(github.event.issue.labels.*.name, 'critical') || 
       contains(github.event.issue.title, 'CRITICAL') ||
       contains(github.event.issue.labels.*.name, 'security'))
    steps:
      - name: Send critical issue alert
        run: |
          echo "üö® CRITICAL ISSUE ALERT üö®"
          echo "Issue: ${{ github.event.issue.title }}"
          echo "Number: #${{ github.event.issue.number }}"
          echo "URL: ${{ github.event.issue.html_url }}"
          echo "Labels: ${{ join(github.event.issue.labels.*.name, ', ') }}"
          
          # Add Slack notification (would require webhook setup)
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® CRITICAL ISSUE: ${{ github.event.issue.title }} - ${{ github.event.issue.html_url }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Auto-assign critical issues
        run: |
          # Auto-assign based on issue type
          TITLE="${{ github.event.issue.title }}"
          NUMBER="${{ github.event.issue.number }}"
          
          if echo "$TITLE" | grep -iE "(security|auth|rbac)" > /dev/null; then
            echo "üîí Assigning security team for security issue"
            # gh issue edit $NUMBER --add-assignee security-team-lead
          elif echo "$TITLE" | grep -iE "(database|api|backend)" > /dev/null; then
            echo "üóÑÔ∏è Assigning backend team for API/database issue"
            # gh issue edit $NUMBER --add-assignee backend-team-lead
          elif echo "$TITLE" | grep -iE "(frontend|ui|website|pwa)" > /dev/null; then
            echo "üé® Assigning frontend team for UI issue"
            # gh issue edit $NUMBER --add-assignee frontend-team-lead
          fi

  ci-cd-failure-alerts:
    name: CI/CD Failure Alerts
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'failure' ||
      github.event.workflow_run.conclusion == 'cancelled'
    steps:
      - name: Send CI/CD failure alert
        run: |
          echo "‚ùå CI/CD FAILURE ALERT"
          echo "Workflow: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "URL: ${{ github.event.workflow_run.html_url }}"
          
          # Determine severity based on workflow and branch
          SEVERITY="Medium"
          if [ "${{ github.event.workflow_run.head_branch }}" = "main" ]; then
            SEVERITY="High"
          fi
          
          echo "Severity: $SEVERITY"

      - name: Create failure tracking issue
        if: github.event.workflow_run.head_branch == 'main'
        run: |
          gh issue create \
            --title "CI/CD Failure: ${{ github.event.workflow_run.name }} on main branch" \
            --body "**Workflow:** ${{ github.event.workflow_run.name }}
          **Branch:** ${{ github.event.workflow_run.head_branch }}
          **Conclusion:** ${{ github.event.workflow_run.conclusion }}
          **URL:** ${{ github.event.workflow_run.html_url }}
          **Timestamp:** $(date -u)
          
          ## Action Required
          This CI/CD failure on the main branch requires immediate attention.
          
          ## Next Steps
          - [ ] Investigate failure cause
          - [ ] Fix identified issues
          - [ ] Verify fix with successful pipeline run
          - [ ] Document lessons learned" \
            --label bug,critical,ci-cd \
            --assignee "${{ github.actor }}"

  milestone-progress-alerts:
    name: Milestone Progress Alerts
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' || github.event.schedule
    steps:
      - name: Check milestone deadlines
        run: |
          echo "üìÖ Checking milestone deadline proximity"
          
          # Get milestones approaching deadline (within 7 days)
          WEEK_FROM_NOW=$(date -d "+7 days" --iso-8601)
          
          gh api repos/:owner/:repo/milestones | jq -r --arg week_from_now "$WEEK_FROM_NOW" '
            .[] | select(.due_on != null and .due_on <= $week_from_now and .state == "open") |
            "‚ö†Ô∏è Milestone approaching deadline:
            Title: \(.title)
            Due: \(.due_on)
            Open Issues: \(.open_issues)
            Progress: \((.closed_issues * 100 / (.open_issues + .closed_issues) | floor))%
            ---"'

      - name: Alert on milestone risks
        run: |
          echo "üéØ Analyzing milestone risk factors"
          
          # Check for milestones with low completion rate near deadline
          gh api repos/:owner/:repo/milestones | jq -r '
            .[] | select(.due_on != null and .state == "open") |
            select((.closed_issues * 100 / (.open_issues + .closed_issues)) < 50) |
            "üö® At-risk milestone:
            Title: \(.title)
            Due: \(.due_on)
            Completion: \((.closed_issues * 100 / (.open_issues + .closed_issues) | floor))%
            Remaining: \(.open_issues) issues
            ---"'

  team-workload-monitoring:
    name: Team Workload Monitoring
    runs-on: ubuntu-latest
    if: github.event.schedule
    steps:
      - name: Analyze team workload distribution
        run: |
          echo "üë• Analyzing team workload distribution"
          
          echo "## Overall Workload Distribution"
          gh issue list --state open --json assignees,labels | jq -r '
            map(select(.assignees | length > 0)) |
            map({assignee: .assignees[0].login, project: (.labels | map(select(.name | test("^(website|api|pwa|admin)$"))) | .[0].name // "unassigned")}) |
            group_by(.assignee) |
            map({assignee: .[0].assignee, count: length, projects: (map(.project) | unique)}) |
            sort_by(.count) | reverse |
            .[] | "üë§ \(.assignee): \(.count) issues across [\(.projects | join(", "))] projects"'

      - name: Identify workload imbalances
        run: |
          echo "‚öñÔ∏è Identifying workload imbalances"
          
          # Get issue counts per assignee
          WORKLOAD_DATA=$(gh issue list --state open --json assignees | jq -r '
            map(select(.assignees | length > 0)) |
            group_by(.assignees[0].login) |
            map({name: .[0].assignees[0].login, count: length}) |
            sort_by(.count)')
          
          # Calculate average and identify outliers
          echo "$WORKLOAD_DATA" | jq -r '
            map(.count) as $counts |
            ($counts | add / length) as $avg |
            map(select(.count > ($avg * 1.5))) |
            if length > 0 then 
              "‚ö†Ô∏è High workload assignees (>150% of average):",
              (.[] | "  - \(.name): \(.count) issues (avg: \($avg | floor))")
            else 
              "‚úÖ Workload appears balanced"
            end'

  daily-standup-preparation:
    name: Daily Standup Preparation
    runs-on: ubuntu-latest
    if: github.event.schedule && github.event.schedule == '0 17 * * *'
    steps:
      - name: Generate daily progress summary
        run: |
          echo "üìä Daily Progress Summary - $(date)"
          echo "## Yesterday's Completed Work"
          
          YESTERDAY=$(date -d "1 day ago" --iso-8601)
          
          for project in "website" "api" "pwa" "admin"; do
            echo "### $project Project"
            
            COMPLETED=$(gh issue list --label $project --state closed --search "closed:>$YESTERDAY" --json number,title,assignees)
            
            if [ "$(echo "$COMPLETED" | jq length)" -gt 0 ]; then
              echo "$COMPLETED" | jq -r '.[] | "- #\(.number): \(.title) (@\(.assignees[0].login // "unassigned"))"'
            else
              echo "- No issues completed yesterday"
            fi
            echo ""
          done

      - name: Identify today's priorities
        run: |
          echo "## Today's Priorities"
          
          # Issues in progress (assigned, labeled as in-progress)
          echo "### In Progress"
          gh issue list --state open --search "assignee:* label:\"in progress\"" --json number,title,assignees,labels | \
          jq -r '.[] | "- #\(.number): \(.title) (@\(.assignees[0].login))"'
          
          echo "### Ready for Review"
          gh pr list --state open --json number,title,author | \
          jq -r '.[] | "- PR #\(.number): \(.title) (@\(.author.login))"'

  weekly-project-summary:
    name: Weekly Project Summary
    runs-on: ubuntu-latest
    if: github.event.schedule && github.event.schedule == '0 9 * * 1'
    steps:
      - name: Generate comprehensive weekly report
        run: |
          echo "üìà Weekly Project Summary - Week of $(date)"
          
          WEEK_AGO=$(date -d "7 days ago" --iso-8601)
          
          echo "## Overall Progress This Week"
          for project in "website" "api" "pwa" "admin"; do
            echo "### $project Project"
            
            CLOSED=$(gh issue list --label $project --state closed --search "closed:>$WEEK_AGO" --json number | jq length)
            OPENED=$(gh issue list --label $project --state all --search "created:>$WEEK_AGO" --json number | jq length)
            TOTAL_OPEN=$(gh issue list --label $project --state open --json number | jq length)
            
            echo "- Issues completed: $CLOSED"
            echo "- New issues: $OPENED"
            echo "- Total open: $TOTAL_OPEN"
            echo ""
          done

      - name: Milestone progress update
        run: |
          echo "## Milestone Progress"
          
          gh api repos/:owner/:repo/milestones | jq -r '.[] | select(.state == "open") |
            "### \(.title)
            - Due: \(.due_on // "No due date")
            - Progress: \((.closed_issues * 100 / (.open_issues + .closed_issues) | floor))% (\(.closed_issues)/\(.open_issues + .closed_issues))
            - Remaining: \(.open_issues) issues
            "'

      - name: Identify blockers and risks
        run: |
          echo "## Blockers and Risks"
          
          # Issues labeled as blocked
          BLOCKED=$(gh issue list --label blocked --state open --json number,title,assignees)
          if [ "$(echo "$BLOCKED" | jq length)" -gt 0 ]; then
            echo "### üö´ Blocked Issues"
            echo "$BLOCKED" | jq -r '.[] | "- #\(.number): \(.title) (@\(.assignees[0].login // "unassigned"))"'
          fi
          
          # Overdue issues (past milestone due date)
          echo "### ‚è∞ Overdue Items"
          TODAY=$(date --iso-8601)
          gh api repos/:owner/:repo/milestones | jq -r --arg today "$TODAY" '
            .[] | select(.due_on != null and .due_on < $today and .open_issues > 0) |
            "- Milestone \(.title) (due \(.due_on)): \(.open_issues) open issues"'

  performance-monitoring-alerts:
    name: Performance Monitoring Alerts
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.name == 'Website CI/CD Pipeline' ||
      github.event.workflow_run.name == 'PWA CI/CD Pipeline'
    steps:
      - name: Monitor Lighthouse score degradation
        run: |
          echo "üö• Monitoring performance metrics"
          
          if [ "${{ github.event.workflow_run.conclusion }}" = "failure" ]; then
            echo "‚ö†Ô∏è Performance tests may have failed"
            
            # Create performance regression issue if on main branch
            if [ "${{ github.event.workflow_run.head_branch }}" = "main" ]; then
              gh issue create \
                --title "Performance Regression Detected in ${{ github.event.workflow_run.name }}" \
                --body "**Workflow:** ${{ github.event.workflow_run.name }}
              **Branch:** ${{ github.event.workflow_run.head_branch }}
              **Status:** Performance tests failed
              **URL:** ${{ github.event.workflow_run.html_url }}
              
              ## Action Required
              Performance regression detected on main branch.
              
              ## Investigation Steps
              - [ ] Review Lighthouse audit results
              - [ ] Identify performance bottlenecks
              - [ ] Implement performance optimizations
              - [ ] Verify improvements with re-run" \
                --label performance,regression,critical
            fi
          fi

  security-monitoring-alerts:
    name: Security Monitoring Alerts
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.name == 'API CI/CD Pipeline' ||
      github.event.workflow_run.name == 'Admin Console CI/CD Pipeline'
    steps:
      - name: Monitor security scan results
        run: |
          echo "üîí Monitoring security scan results"
          
          if [ "${{ github.event.workflow_run.conclusion }}" = "failure" ]; then
            echo "üö® Security scan may have failed"
            
            # Create security alert issue
            gh issue create \
              --title "Security Scan Failure in ${{ github.event.workflow_run.name }}" \
              --body "**Workflow:** ${{ github.event.workflow_run.name }}
            **Branch:** ${{ github.event.workflow_run.head_branch }}
            **Status:** Security scan failed
            **URL:** ${{ github.event.workflow_run.html_url }}
            
            ## Immediate Action Required
            Security scan failure requires immediate investigation.
            
            ## Security Response Steps
            - [ ] Review security scan results
            - [ ] Identify security vulnerabilities
            - [ ] Implement security fixes
            - [ ] Verify fixes with re-scan
            - [ ] Document security improvements" \
              --label security,critical,urgent \
              --assignee "${{ github.actor }}"
          fi