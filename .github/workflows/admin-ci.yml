name: Admin Console CI/CD Pipeline

on:
  push:
    paths:
      - 'apps/admin/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/admin-ci.yml'
    branches: [main, develop]
  pull_request:
    paths:
      - 'apps/admin/**'
      - 'libs/shared/**'
      - 'package*.json'
      - '.github/workflows/admin-ci.yml'
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_RUN_GROUP: ${{ github.run_id }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected: ${{ steps.check-affected.outputs.affected }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check affected projects
        id: check-affected
        run: |
          affected=$(npx nx show projects --affected --json)
          echo "affected=$affected" >> $GITHUB_OUTPUT
          echo "Affected projects: $affected"

  lint:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx nx lint admin

      - name: Run type checking
        run: npx nx run admin:typecheck

  test:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npx nx test admin --coverage --watch=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/apps/admin/lcov.info
          flags: admin
          name: admin-coverage

  build:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build admin console
        run: npx nx build admin --configuration=production

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/
          retention-days: 1

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'admin'
          path: './apps/admin'
          format: 'ALL'

      - name: Upload OWASP report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-admin-report
          path: reports/
          retention-days: 7

  rbac-testing:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Start admin console
        run: |
          npx http-server dist/apps/admin -p 4201 &
          sleep 10

      - name: Run RBAC access control tests
        run: npx nx run admin:test:rbac
        env:
          ADMIN_BASE_URL: http://localhost:4201

      - name: Run security penetration tests
        run: npx nx run admin:test:security
        env:
          ADMIN_BASE_URL: http://localhost:4201

      - name: Upload RBAC test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: rbac-test-results
          path: apps/admin/rbac-test-results/
          retention-days: 7

  e2e-admin-workflows:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    strategy:
      matrix:
        workflow: [content-management, user-administration, analytics-dashboard, customer-support]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Start admin console
        run: |
          npx http-server dist/apps/admin -p 4201 &
          sleep 10

      - name: Run E2E workflow tests
        run: npx nx run admin-e2e:e2e --spec=${{ matrix.workflow }}
        env:
          ADMIN_BASE_URL: http://localhost:4201

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-${{ matrix.workflow }}-results
          path: apps/admin-e2e/test-results/
          retention-days: 7

  performance-testing:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request' && contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Start admin console
        run: |
          npx http-server dist/apps/admin -p 4201 &
          sleep 10

      - name: Run Lighthouse performance audit
        run: |
          lhci autorun --config=.lighthouserc-admin.js
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run admin dashboard performance tests
        run: npx nx run admin:test:performance
        env:
          ADMIN_BASE_URL: http://localhost:4201

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-admin-results
          path: .lighthouseci/
          retention-days: 7

  accessibility-testing:
    runs-on: ubuntu-latest
    needs: [build]
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/

      - name: Start admin console
        run: |
          npx http-server dist/apps/admin -p 4201 &
          sleep 10

      - name: Run accessibility tests
        run: npx nx run admin:test:accessibility
        env:
          ADMIN_BASE_URL: http://localhost:4201

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-admin-results
          path: apps/admin/accessibility-results/
          retention-days: 7

  compliance-validation:
    runs-on: ubuntu-latest
    needs: [security-scan, rbac-testing]
    if: contains(fromJson(needs.setup.outputs.affected), 'admin')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run GDPR compliance validation
        run: |
          echo "Running GDPR compliance validation..."
          npx nx run admin:test:gdpr-compliance

      - name: Run SOC 2 compliance checks
        run: |
          echo "Running SOC 2 compliance validation..."
          npx nx run admin:test:soc2-compliance

      - name: Validate audit logging
        run: |
          echo "Validating audit logging implementation..."
          npx nx run admin:test:audit-logging

      - name: Generate compliance report
        run: |
          echo "## Admin Console Compliance Report" > compliance-report.md
          echo "**Timestamp:** $(date -u)" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "### GDPR Compliance" >> compliance-report.md
          echo "✅ Data subject rights implementation validated" >> compliance-report.md
          echo "✅ Consent management system operational" >> compliance-report.md
          echo "✅ Data retention policies implemented" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "### SOC 2 Compliance" >> compliance-report.md
          echo "✅ Security controls validated" >> compliance-report.md
          echo "✅ Access controls operational" >> compliance-report.md
          echo "✅ Availability monitoring active" >> compliance-report.md
          echo "" >> compliance-report.md
          echo "### Audit Logging" >> compliance-report.md
          echo "✅ Administrative action logging operational" >> compliance-report.md
          echo "✅ User access logging functional" >> compliance-report.md
          echo "✅ Data modification tracking active" >> compliance-report.md

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: admin-compliance-report
          path: compliance-report.md
          retention-days: 30

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-scan, rbac-testing, e2e-admin-workflows, compliance-validation]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/

      - name: Deploy to staging
        run: |
          echo "Deploying admin console to staging environment..."
          # Add your staging deployment commands here
          # Example: Deploy to staging server, update CDN, etc.

      - name: Run staging health checks
        run: |
          echo "Running staging health checks..."
          # Add health check commands for staging admin console

      - name: Validate RBAC in staging
        run: |
          echo "Validating role-based access control in staging..."
          # Add RBAC validation for staging environment

  deploy-production:
    runs-on: ubuntu-latest
    needs: [lint, test, build, security-scan, rbac-testing, e2e-admin-workflows, compliance-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: admin-build
          path: dist/apps/admin/

      - name: Deploy to production
        run: |
          echo "Deploying admin console to production environment..."
          # Add your production deployment commands here
          # Example: Deploy to production server, update CDN, etc.

      - name: Run production health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands for production admin console

      - name: Validate production security
        run: |
          echo "Validating production security measures..."
          # Add security validation for production environment

      - name: Update operational documentation
        run: |
          echo "Updating operational documentation..."
          # Add commands to update admin documentation

      - name: Notify deployment success
        if: success()
        run: |
          echo "Admin console deployed successfully to production!"
          # Add notification logic (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic