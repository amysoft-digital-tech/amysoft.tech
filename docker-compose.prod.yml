version: '3.8'

services:
  # Admin Console Production Service
  admin:
    build:
      context: .
      dockerfile: apps/admin/Dockerfile.prod
    container_name: amysoft-admin-prod
    ports:
      - "4201:80"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=https://api.amysoft.tech
      - MONITORING_ENABLED=true
    depends_on:
      - postgres
      - redis
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.amysoft.tech`)"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"

  # Website Production Service  
  website:
    build:
      context: .
      dockerfile: apps/website/Dockerfile.prod
    container_name: amysoft-website-prod
    ports:
      - "4200:80"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=https://api.amysoft.tech
    depends_on:
      - api
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Production Service
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile.prod
    container_name: amysoft-api-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/amysoft_prod
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - EMAIL_SERVICE_KEY=${EMAIL_SERVICE_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PWA Production Service
  pwa:
    build:
      context: .
      dockerfile: apps/pwa/Dockerfile.prod
    container_name: amysoft-pwa-prod
    ports:
      - "8100:80"
    environment:
      - NODE_ENV=production
      - API_BASE_URL=https://api.amysoft.tech
    networks:
      - prod-network
    restart: unless-stopped

  # Production Database
  postgres:
    image: postgres:15-alpine
    container_name: amysoft-postgres-prod
    environment:
      POSTGRES_DB: amysoft_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./db/init-prod.sql:/docker-entrypoint-initdb.d/init.sql
      - ./db/backups:/backups
    ports:
      - "5432:5432"
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Production Redis Cache
  redis:
    image: redis:7-alpine
    container_name: amysoft-redis-prod
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - prod-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: amysoft-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - admin
      - website
      - api
      - pwa
    networks:
      - prod-network
    restart: unless-stopped

  # Production Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: amysoft-prometheus-prod
    volumes:
      - ./monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - prod-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Production Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: amysoft-grafana-prod
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_DOMAIN: grafana.amysoft.tech
      GF_SMTP_ENABLED: true
      GF_SMTP_HOST: ${SMTP_HOST}
      GF_SMTP_USER: ${SMTP_USER}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD}
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./monitoring/grafana/prod:/etc/grafana/provisioning
    ports:
      - "3002:3000"
    networks:
      - prod-network
    restart: unless-stopped

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: amysoft-loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    networks:
      - prod-network
    restart: unless-stopped

  # Backup Service
  backup:
    build:
      context: ./backup
      dockerfile: Dockerfile
    container_name: amysoft-backup-prod
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=amysoft_prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - ./backups:/backups
    depends_on:
      - postgres
    networks:
      - prod-network
    restart: unless-stopped

networks:
  prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  grafana_prod_data:
    driver: local
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local