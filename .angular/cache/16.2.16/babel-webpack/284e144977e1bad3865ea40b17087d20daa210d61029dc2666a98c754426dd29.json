{"ast":null,"code":"import _asyncToGenerator from \"/media/c/TATOOINE/amysoft.tech/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport * as i0 from \"@angular/core\";\nexport let PerformanceService = /*#__PURE__*/(() => {\n  class PerformanceService {\n    constructor(platformId) {\n      this.metrics = {};\n      this.isBrowser = isPlatformBrowser(platformId);\n    }\n    initializeWebVitals() {\n      if (!this.isBrowser) return;\n      // Measure Time to First Byte (TTFB)\n      if ('navigation' in window.performance && window.performance.navigation) {\n        const navigationTiming = window.performance.getEntriesByType('navigation')[0];\n        if (navigationTiming) {\n          this.metrics.ttfb = navigationTiming.responseStart - navigationTiming.fetchStart;\n        }\n      }\n      // Use Web Vitals library if available\n      this.loadWebVitalsLibrary();\n      // Fallback measurements\n      this.measureFCP();\n      this.measureLCP();\n      this.measureCLS();\n    }\n    loadWebVitalsLibrary() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Dynamically import web-vitals if available\n          const {\n            onCLS,\n            onFCP,\n            onFID,\n            onLCP,\n            onTTFB\n          } = yield import('web-vitals');\n          onCLS(metric => {\n            _this.metrics.cls = metric.value;\n            _this.sendMetric('CLS', metric.value);\n          });\n          onFCP(metric => {\n            _this.metrics.fcp = metric.value;\n            _this.sendMetric('FCP', metric.value);\n          });\n          onFID(metric => {\n            _this.metrics.fid = metric.value;\n            _this.sendMetric('FID', metric.value);\n          });\n          onLCP(metric => {\n            _this.metrics.lcp = metric.value;\n            _this.sendMetric('LCP', metric.value);\n          });\n          onTTFB(metric => {\n            _this.metrics.ttfb = metric.value;\n            _this.sendMetric('TTFB', metric.value);\n          });\n        } catch (error) {\n          console.warn('Web Vitals library not available, using fallback measurements');\n        }\n      })();\n    }\n    measureFCP() {\n      if (!('PerformanceObserver' in window)) return;\n      const observer = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n        const fcpEntry = entries.find(entry => entry.name === 'first-contentful-paint');\n        if (fcpEntry && !this.metrics.fcp) {\n          this.metrics.fcp = fcpEntry.startTime;\n          this.sendMetric('FCP', fcpEntry.startTime);\n          observer.disconnect();\n        }\n      });\n      observer.observe({\n        entryTypes: ['paint']\n      });\n    }\n    measureLCP() {\n      if (!('PerformanceObserver' in window)) return;\n      const observer = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n        const lastEntry = entries[entries.length - 1];\n        if (lastEntry) {\n          this.metrics.lcp = lastEntry.startTime;\n          this.sendMetric('LCP', lastEntry.startTime);\n        }\n      });\n      observer.observe({\n        entryTypes: ['largest-contentful-paint']\n      });\n    }\n    measureCLS() {\n      if (!('PerformanceObserver' in window)) return;\n      let clsValue = 0;\n      let clsEntries = [];\n      let sessionValue = 0;\n      let sessionEntries = [];\n      const observer = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n        for (const entry of entries) {\n          if (!entry.hadRecentInput) {\n            const firstSessionEntry = sessionEntries[0];\n            const lastSessionEntry = sessionEntries[sessionEntries.length - 1];\n            if (sessionValue && entry.startTime - lastSessionEntry.startTime < 1000 && entry.startTime - firstSessionEntry.startTime < 5000) {\n              sessionValue += entry.value;\n              sessionEntries.push(entry);\n            } else {\n              sessionValue = entry.value;\n              sessionEntries = [entry];\n            }\n            if (sessionValue > clsValue) {\n              clsValue = sessionValue;\n              clsEntries = [...sessionEntries];\n              this.metrics.cls = clsValue;\n              this.sendMetric('CLS', clsValue);\n            }\n          }\n        }\n      });\n      observer.observe({\n        entryTypes: ['layout-shift']\n      });\n    }\n    sendMetric(name, value) {\n      // Send to analytics service (implement based on your analytics provider)\n      console.log(`Performance Metric - ${name}: ${value}ms`);\n      // Example: Send to Google Analytics 4\n      if (typeof window !== 'undefined' && 'gtag' in window) {\n        window.gtag('event', name, {\n          event_category: 'Web Vitals',\n          value: Math.round(value),\n          non_interaction: true\n        });\n      }\n    }\n    getMetrics() {\n      return {\n        ...this.metrics\n      };\n    }\n    // Additional performance monitoring methods\n    measureResourceTiming() {\n      if (!this.isBrowser || !('performance' in window)) return;\n      const resources = window.performance.getEntriesByType('resource');\n      const slowResources = resources.filter(resource => resource.duration > 1000);\n      if (slowResources.length > 0) {\n        console.warn('Slow loading resources detected:', slowResources);\n      }\n    }\n    measureMemoryUsage() {\n      if (!this.isBrowser || !('memory' in window.performance)) return;\n      const memory = window.performance.memory;\n      console.log('Memory Usage:', {\n        used: Math.round(memory.usedJSHeapSize / 1048576) + ' MB',\n        total: Math.round(memory.totalJSHeapSize / 1048576) + ' MB',\n        limit: Math.round(memory.jsHeapSizeLimit / 1048576) + ' MB'\n      });\n    }\n    // Preload critical resources\n    preloadCriticalResources() {\n      if (!this.isBrowser) return;\n      const criticalResources = ['/assets/fonts/primary-font.woff2', '/assets/images/hero-bg.webp', '/assets/css/critical.css'];\n      criticalResources.forEach(resource => {\n        const link = document.createElement('link');\n        link.rel = 'preload';\n        link.href = resource;\n        if (resource.includes('.woff2')) {\n          link.as = 'font';\n          link.type = 'font/woff2';\n          link.crossOrigin = 'anonymous';\n        } else if (resource.includes('.webp') || resource.includes('.jpg') || resource.includes('.png')) {\n          link.as = 'image';\n        } else if (resource.includes('.css')) {\n          link.as = 'style';\n        }\n        document.head.appendChild(link);\n      });\n    }\n    // Lazy load non-critical resources\n    lazyLoadImages() {\n      if (!this.isBrowser || !('IntersectionObserver' in window)) return;\n      const lazyImages = document.querySelectorAll('img[data-src]');\n      const imageObserver = new IntersectionObserver((entries, observer) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            const img = entry.target;\n            img.src = img.dataset['src'] || '';\n            img.classList.remove('lazy');\n            observer.unobserve(img);\n          }\n        });\n      });\n      lazyImages.forEach(img => imageObserver.observe(img));\n    }\n    // Monitor long tasks that block the main thread\n    monitorLongTasks() {\n      if (!this.isBrowser || !('PerformanceObserver' in window)) return;\n      const observer = new PerformanceObserver(list => {\n        const entries = list.getEntries();\n        entries.forEach(entry => {\n          if (entry.duration > 50) {\n            console.warn('Long task detected:', {\n              duration: entry.duration,\n              startTime: entry.startTime\n            });\n          }\n        });\n      });\n      observer.observe({\n        entryTypes: ['longtask']\n      });\n    }\n    static {\n      this.ɵfac = function PerformanceService_Factory(t) {\n        return new (t || PerformanceService)(i0.ɵɵinject(PLATFORM_ID));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PerformanceService,\n        factory: PerformanceService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PerformanceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}